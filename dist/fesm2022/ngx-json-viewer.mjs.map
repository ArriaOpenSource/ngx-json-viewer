{"version":3,"file":"ngx-json-viewer.mjs","sources":["../../src/ngx-json-viewer/ngx-json-viewer.component.ts","../../src/ngx-json-viewer/ngx-json-viewer.component.html","../../src/ngx-json-viewer.module.ts","../../ngx-json-viewer.ts"],"sourcesContent":["import {Component, OnChanges, Input, ViewChildren, QueryList} from '@angular/core';\r\n\r\nexport interface ISegment {\r\n  key: string;\r\n  value: any;\r\n  type: undefined | string;\r\n  description: string;\r\n  expanded: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'ngx-json-viewer',\r\n  templateUrl: './ngx-json-viewer.component.html',\r\n  styleUrls: ['./ngx-json-viewer.component.scss'],\r\n})\r\nexport class NgxJsonViewerComponent implements OnChanges {\r\n  @Input() public json: any;\r\n  @Input() public expanded = true;\r\n  @Input() public depth = -1;\r\n  @Input() public restoreExpanded = false;\r\n  @Input() public showTypeHeadings = false;\r\n\r\n  @Input() public _key: string;\r\n  @Input() public _previouslyOpenKeys?: {[key: string]: any};\r\n  @Input() public _currentDepth = -1;\r\n\r\n  public segments: ISegment[] = [];\r\n\r\n  @ViewChildren(NgxJsonViewerComponent)\r\n  public childrenComponents: QueryList<NgxJsonViewerComponent>;\r\n\r\n  private getOpenKeysRecursive(): any {\r\n    const openKeys: {[key: string]: any} = {};\r\n    this.childrenComponents.forEach((component) => {\r\n      // Save key and length\r\n      openKeys[component._key] = component.getOpenKeysRecursive();\r\n    });\r\n\r\n    if (Object.keys(openKeys).length === 0) {\r\n      return;\r\n    }\r\n    return openKeys;\r\n  }\r\n\r\n  private openSegments(): void {\r\n    const keys = Object.keys(this._previouslyOpenKeys!);\r\n    keys.forEach((key) => {\r\n      // Check to see if the key exists, if so expands it\r\n      const foundSegment = this.segments.find((segment) => segment.key === key);\r\n\r\n      if (!foundSegment) {\r\n        return;\r\n      }\r\n\r\n      if (!this.isExpandable(foundSegment)) {\r\n        return;\r\n      }\r\n\r\n      foundSegment.expanded = true;\r\n    });\r\n  }\r\n\r\n  public ngOnChanges(): void {\r\n    // Save open keys structure before processing new json\r\n    // Will only run in top level\r\n    if (this.restoreExpanded && this.childrenComponents) {\r\n      this._previouslyOpenKeys = this.getOpenKeysRecursive();\r\n    }\r\n\r\n    this.segments = [];\r\n\r\n    // remove cycles\r\n    this.json = this.decycle(this.json);\r\n\r\n    this._currentDepth++;\r\n\r\n    if (typeof this.json === 'object') {\r\n      Object.keys(this.json).forEach((key) => {\r\n        this.segments.push(this.parseKeyValue(key, this.json[key]));\r\n      });\r\n    } else {\r\n      this.segments.push(this.parseKeyValue(`(${typeof this.json})`, this.json));\r\n    }\r\n\r\n    if (!this._previouslyOpenKeys) {\r\n      return;\r\n    } else {\r\n      this.openSegments();\r\n    }\r\n  }\r\n\r\n  public isExpandable(segment: ISegment): any {\r\n    return segment.type === 'object' || segment.type === 'array';\r\n  }\r\n\r\n  public toggle(segment: ISegment): any {\r\n    if (this.isExpandable(segment)) {\r\n      segment.expanded = !segment.expanded;\r\n    }\r\n  }\r\n\r\n  private parseKeyValue(key: any, value: any): ISegment {\r\n    const segment: ISegment = {\r\n      key: key,\r\n      value: value,\r\n      type: undefined,\r\n      description: '' + value,\r\n      expanded: this.isExpanded(),\r\n    };\r\n\r\n    switch (typeof segment.value) {\r\n      case 'number': {\r\n        segment.type = 'number';\r\n        break;\r\n      }\r\n      case 'boolean': {\r\n        segment.type = 'boolean';\r\n        break;\r\n      }\r\n      case 'function': {\r\n        segment.type = 'function';\r\n        break;\r\n      }\r\n      case 'string': {\r\n        segment.type = 'string';\r\n        segment.description = '\"' + segment.value + '\"';\r\n        break;\r\n      }\r\n      case 'undefined': {\r\n        segment.type = 'undefined';\r\n        segment.description = 'undefined';\r\n        break;\r\n      }\r\n      case 'object': {\r\n        // yea, null is object\r\n        if (segment.value === null) {\r\n          segment.type = 'null';\r\n          segment.description = 'null';\r\n        } else if (Array.isArray(segment.value)) {\r\n          segment.type = 'array';\r\n          segment.description =\r\n            'Array[' + segment.value.length + '] ' + JSON.stringify(segment.value);\r\n        } else if (segment.value instanceof Date) {\r\n          segment.type = 'date';\r\n        } else {\r\n          segment.type = 'object';\r\n          segment.description = 'Object ' + JSON.stringify(segment.value);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    return segment;\r\n  }\r\n\r\n  private isExpanded(): boolean {\r\n    return this.expanded && !(this.depth > -1 && this._currentDepth >= this.depth);\r\n  }\r\n\r\n  // https://github.com/douglascrockford/JSON-js/blob/master/cycle.js\r\n  private decycle(object: any): any {\r\n    const objects = new WeakMap();\r\n    return (function derez(value: any, path: any): any {\r\n      let oldPath;\r\n      let nu: any;\r\n\r\n      if (\r\n        typeof value === 'object' &&\r\n        value !== null &&\r\n        !(value instanceof Boolean) &&\r\n        !(value instanceof Date) &&\r\n        !(value instanceof Number) &&\r\n        !(value instanceof RegExp) &&\r\n        !(value instanceof String)\r\n      ) {\r\n        oldPath = objects.get(value);\r\n        if (oldPath !== undefined) {\r\n          return {$ref: oldPath};\r\n        }\r\n        objects.set(value, path);\r\n\r\n        if (Array.isArray(value)) {\r\n          nu = [];\r\n          value.forEach((element, i) => {\r\n            nu[i] = derez(element, path + '[' + i + ']');\r\n          });\r\n        } else {\r\n          nu = {};\r\n          Object.keys(value).forEach((name) => {\r\n            nu[name] = derez(value[name], path + '[' + JSON.stringify(name) + ']');\r\n          });\r\n        }\r\n        return nu;\r\n      }\r\n      return value;\r\n    })(object, '$');\r\n  }\r\n}\r\n","<section class=\"ngx-json-viewer\">\r\n  <section *ngFor=\"let segment of segments\" [ngClass]=\"['segment', 'segment-type-' + segment.type]\">\r\n    <section\r\n      (click)=\"toggle(segment)\"\r\n      [ngClass]=\"{\r\n        'segment-main': true,\r\n        expandable: isExpandable(segment),\r\n        expanded: segment.expanded\r\n      }\"\r\n    >\r\n      <div *ngIf=\"isExpandable(segment)\" class=\"toggler\"></div>\r\n      <span class=\"segment-key\">{{ segment.key }}</span>\r\n      <span class=\"segment-separator\">: </span>\r\n      <span *ngIf=\"!segment.expanded || !isExpandable(segment)\" class=\"segment-value\">{{\r\n        segment.description\r\n      }}</span>\r\n      <span\r\n        *ngIf=\"showTypeHeadings && segment.expanded && segment.type == 'array'\"\r\n        class=\"segment-value\"\r\n        >Array[{{ segment.value.length }}]</span\r\n      >\r\n      <span\r\n        *ngIf=\"showTypeHeadings && segment.expanded && segment.type == 'object'\"\r\n        class=\"segment-value\"\r\n        >Object</span\r\n      >\r\n    </section>\r\n    <section *ngIf=\"segment.expanded && isExpandable(segment)\" class=\"children\">\r\n      <ngx-json-viewer\r\n        [json]=\"segment.value\"\r\n        [expanded]=\"expanded\"\r\n        [depth]=\"depth\"\r\n        [showTypeHeadings]=\"showTypeHeadings\"\r\n        [_key]=\"segment.key\"\r\n        [_currentDepth]=\"_currentDepth\"\r\n        [_previouslyOpenKeys]=\"_previouslyOpenKeys && _previouslyOpenKeys[segment.key]\"\r\n      ></ngx-json-viewer>\r\n    </section>\r\n  </section>\r\n</section>\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport {NgxJsonViewerComponent} from './ngx-json-viewer/ngx-json-viewer.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [NgxJsonViewerComponent],\r\n  exports: [NgxJsonViewerComponent],\r\n})\r\nexport class NgxJsonViewerModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}