{"version":3,"file":"ngx-json-viewer.js","sources":["ts/ngx-json-viewer.ts","ts/src/ngx-json-viewer.module.ts","ts/src/ngx-json-viewer/ngx-json-viewer.component.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {NgxJsonViewerModule,NgxJsonViewerComponent} from './index';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgxJsonViewerComponent } from './ngx-json-viewer/ngx-json-viewer.component';\nexport class NgxJsonViewerModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgxJsonViewerComponent\n  ],\n  exports: [\n    NgxJsonViewerComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgxJsonViewerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxJsonViewerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxJsonViewerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, OnChanges, Input, ViewChildren, QueryList} from '@angular/core';\n\nexport interface ISegment {\n  key: string;\n  value: any;\n  type: undefined | string;\n  description: string;\n  expanded: boolean;\n}\nexport class NgxJsonViewerComponent implements OnChanges {\npublic json: any;\npublic expanded = true;\npublic depth = -1;\npublic key = 'Object';\npublic length = -1;\npublic restoreExpanded = false;\npublic showTypeHeadings = false;\npublic _currentDepth = -1;\npublic _previouslyOpenKeys?: {[key: string]: any};\npublic nextOpenKeys: {[key: string]: any} = {};\npublic segments: ISegment[] = [];\nprivate underscoreRegex = /_[^_]+$/;\npublic childrenComponents: QueryList<\n  NgxJsonViewerComponent\n  >;\n/**\n * @return {?}\n */\nprivate getOpenKeysRecursive(): any {\n    const /** @type {?} */ openKeys: {[key: string]: any} = {};\n    this.childrenComponents.forEach((component: NgxJsonViewerComponent) => {\n      // Save key and length - on reload array elements should only be reopened if\n      // the array is the same length\n      openKeys[component.key + '_' + component.length] = component.getOpenKeysRecursive();\n    });\n\n    if (Object.keys(openKeys).length === 0) {\n      return;\n    }\n    return openKeys;\n  }\n/**\n * @return {?}\n */\nprivate openSegments(): void {\n    const /** @type {?} */ keys = Object.keys( /** @type {?} */((this._previouslyOpenKeys)));\n    keys.forEach(key => {\n      // Check to see if the key exists, if so expands it\n      const /** @type {?} */ strippedKey = key.replace(this.underscoreRegex, '');\n      const /** @type {?} */ foundSegment = this.segments.find(segment => {\n        return segment.key === strippedKey;\n      });\n\n      if (!foundSegment) {\n        return;\n      }\n\n      if (!this.isExpandable(foundSegment)) {\n        return;\n      }\n\n      foundSegment.expanded = true;\n    });\n  }\n/**\n * @return {?}\n */\npublic ngOnChanges(): void {\n    // Save open keys structure before processing new json\n    // Will only run in top level\n    if (this.restoreExpanded && this.childrenComponents) {\n      this._previouslyOpenKeys = this.getOpenKeysRecursive();\n      console.log(this._previouslyOpenKeys);\n    }\n\n    this.segments = [];\n\n    // remove cycles\n    this.json = this.decycle(this.json);\n\n    this._currentDepth++;\n\n    if (typeof this.json === 'object') {\n      Object.keys(this.json).forEach(key => {\n        this.segments.push(this.parseKeyValue(key, this.json[key]));\n      });\n    } else {\n      this.segments.push(this.parseKeyValue(`(${typeof this.json})`, this.json));\n    }\n\n    if (!this._previouslyOpenKeys) {\n      return;\n    } else {\n      this.openSegments();\n    }\n  }\n/**\n * @param {?} segment\n * @return {?}\n */\npublic isExpandable(segment: ISegment): any {\n    return segment.type === 'object' || segment.type === 'array';\n  }\n/**\n * @param {?} segment\n * @return {?}\n */\npublic toggle(segment: ISegment): any {\n    if (this.isExpandable(segment)) {\n      segment.expanded = !segment.expanded;\n    }\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nprivate parseKeyValue(key: any, value: any): ISegment {\n    const /** @type {?} */ segment: ISegment = {\n      key: key,\n      value: value,\n      type: undefined,\n      description: '' + value,\n      expanded: this.isExpanded(),\n    };\n\n    switch (typeof segment.value) {\n      case 'number': {\n        segment.type = 'number';\n        break;\n      }\n      case 'boolean': {\n        segment.type = 'boolean';\n        break;\n      }\n      case 'function': {\n        segment.type = 'function';\n        break;\n      }\n      case 'string': {\n        segment.type = 'string';\n        segment.description = '\"' + segment.value + '\"';\n        break;\n      }\n      case 'undefined': {\n        segment.type = 'undefined';\n        segment.description = 'undefined';\n        break;\n      }\n      case 'object': {\n        // yea, null is object\n        if (segment.value === null) {\n          segment.type = 'null';\n          segment.description = 'null';\n        } else if (Array.isArray(segment.value)) {\n          segment.type = 'array';\n          segment.description =\n            'Array[' + segment.value.length + '] ' + JSON.stringify(segment.value);\n        } else if (segment.value instanceof Date) {\n          segment.type = 'date';\n        } else {\n          segment.type = 'object';\n          segment.description = 'Object ' + JSON.stringify(segment.value);\n        }\n        break;\n      }\n    }\n\n    return segment;\n  }\n/**\n * @return {?}\n */\nprivate isExpanded(): boolean {\n    return this.expanded && !(this.depth > -1 && this._currentDepth >= this.depth);\n  }\n/**\n * @param {?} object\n * @return {?}\n */\nprivate decycle(object: any): any {\n    const /** @type {?} */ objects = new WeakMap();\n    return (function derez(value: any, path: any): any {\n      let /** @type {?} */ oldPath;\n      let /** @type {?} */ nu: any;\n\n      if (\n        typeof value === 'object' &&\n        value !== null &&\n        !(value instanceof Boolean) &&\n        !(value instanceof Date) &&\n        !(value instanceof Number) &&\n        !(value instanceof RegExp) &&\n        !(value instanceof String)\n      ) {\n        oldPath = objects.get(value);\n        if (oldPath !== undefined) {\n          return {$ref: oldPath};\n        }\n        objects.set(value, path);\n\n        if (Array.isArray(value)) {\n          nu = [];\n          value.forEach((element, i) => {\n            nu[i] = derez(element, path + '[' + i + ']');\n          });\n        } else {\n          nu = {};\n          Object.keys(value).forEach(name => {\n            nu[name] = derez(value[name], path + '[' + JSON.stringify(name) + ']');\n          });\n        }\n        return nu;\n      }\n      return value;\n    })(object, '$');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngx-json-viewer',\n  template: `\n    <section class=\"ngx-json-viewer\">\n      <section *ngFor=\"let segment of segments\" [ngClass]=\"['segment', 'segment-type-' + segment.type]\">\n        <section\n          (click)=\"toggle(segment)\"\n          [ngClass]=\"{\n            'segment-main': true,\n            expandable: isExpandable(segment),\n            expanded: segment.expanded\n          }\"\n        >\n          <div *ngIf=\"isExpandable(segment)\" class=\"toggler\"></div>\n          <span class=\"segment-key\">{{ segment.key }}</span>\n          <span class=\"segment-separator\">: </span>\n          <span *ngIf=\"!segment.expanded || !isExpandable(segment)\" class=\"segment-value\">{{\n            segment.description\n          }}</span>\n          <span\n            *ngIf=\"showTypeHeadings && segment.expanded && segment.type == 'array'\"\n            class=\"segment-value\"\n            >Array[{{ segment.value.length }}]</span\n          >\n          <span\n            *ngIf=\"showTypeHeadings && segment.expanded && segment.type == 'object'\"\n            class=\"segment-value\"\n            >Object</span\n          >\n        </section>\n        <section *ngIf=\"segment.expanded && isExpandable(segment)\" class=\"children\">\n          <ngx-json-viewer\n            [json]=\"segment.value\"\n            [expanded]=\"expanded\"\n            [depth]=\"depth\"\n            [_currentDepth]=\"_currentDepth\"\n            [key]=\"segment.key\"\n            [length]=\"segment.type === 'array' ? segment.value.length : -1\"\n            [_previouslyOpenKeys]=\"\n              _previouslyOpenKeys &&\n              _previouslyOpenKeys[\n                segment.type === 'array'\n                  ? segment.key + '_' + segment.value.length\n                  : segment.key + '_-1'\n              ]\n            \"\n          ></ngx-json-viewer>\n        </section>\n      </section>\n    </section>\n  `,\n  styles: [`\n    @charset \"UTF-8\";\n    .ngx-json-viewer {\n      font-family: monospace;\n      font-size: 1em;\n      width: 100%;\n      height: 100%;\n      overflow: hidden;\n      position: relative; }\n      .ngx-json-viewer .segment {\n        padding: 0px;\n        margin: 0px 0px 1px 12px; }\n        .ngx-json-viewer .segment .segment-main {\n          word-wrap: break-word; }\n          .ngx-json-viewer .segment .segment-main .toggler {\n            position: absolute;\n            margin-left: -14px;\n            margin-top: 3px;\n            font-size: .8em;\n            line-height: 1.2em;\n            vertical-align: middle;\n            color: #787878; }\n            .ngx-json-viewer .segment .segment-main .toggler::after {\n              display: inline-block;\n              content: \"â–º\";\n              -webkit-transition: -webkit-transform 0.1s ease-in;\n              transition: -webkit-transform 0.1s ease-in;\n              transition: transform 0.1s ease-in;\n              transition: transform 0.1s ease-in, -webkit-transform 0.1s ease-in; }\n          .ngx-json-viewer .segment .segment-main .segment-key {\n            color: #00008b;\n            word-wrap: break-word;\n            white-space: pre-line; }\n          .ngx-json-viewer .segment .segment-main .segment-separator {\n            color: #00008b; }\n          .ngx-json-viewer .segment .segment-main .segment-value {\n            color: #000; }\n        .ngx-json-viewer .segment .children {\n          margin-left: 4px; }\n      .ngx-json-viewer .segment-type-string > .segment-main > .segment-value {\n        color: green; }\n      .ngx-json-viewer .segment-type-number > .segment-main > .segment-value {\n        color: #0000ff; }\n      .ngx-json-viewer .segment-type-boolean > .segment-main > .segment-value {\n        color: red; }\n      .ngx-json-viewer .segment-type-date > .segment-main > .segment-value {\n        color: #05668D; }\n      .ngx-json-viewer .segment-type-array > .segment-main > .segment-value {\n        color: #999; }\n      .ngx-json-viewer .segment-type-object > .segment-main > .segment-value {\n        color: #999; }\n      .ngx-json-viewer .segment-type-function > .segment-main > .segment-value {\n        color: #999; }\n      .ngx-json-viewer .segment-type-null > .segment-main > .segment-value {\n        color: #855a00; }\n      .ngx-json-viewer .segment-type-undefined > .segment-main > .segment-value {\n        color: #855a00; }\n      .ngx-json-viewer .segment-type-undefined > .segment-main > .segment-key {\n        color: #999; }\n      .ngx-json-viewer .segment-type-undefined > .segment-main > .segment-value {\n        background-color: #999; }\n      .ngx-json-viewer .segment-type-object > .segment-main,\n      .ngx-json-viewer .segment-type-array > .segment-main {\n        white-space: nowrap; }\n      .ngx-json-viewer .expanded > .toggler::after {\n        -webkit-transform: rotate(90deg);\n                transform: rotate(90deg); }\n      .ngx-json-viewer .expandable > .segment-value {\n        display: inline-block;\n        vertical-align: bottom;\n        text-overflow: ellipsis;\n        overflow: hidden; }\n      .ngx-json-viewer .expandable,\n      .ngx-json-viewer .expandable > .toggler {\n        cursor: pointer; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'json': [{ type: Input },],\n'expanded': [{ type: Input },],\n'depth': [{ type: Input },],\n'key': [{ type: Input },],\n'length': [{ type: Input },],\n'restoreExpanded': [{ type: Input },],\n'showTypeHeadings': [{ type: Input },],\n'_currentDepth': [{ type: Input },],\n'_previouslyOpenKeys': [{ type: Input },],\n'childrenComponents': [{ type: ViewChildren, args: [NgxJsonViewerComponent, ] },],\n};\n}\n\nfunction NgxJsonViewerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxJsonViewerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxJsonViewerComponent.ctorParameters;\n/** @type {?} */\nNgxJsonViewerComponent.propDecorators;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.json;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.expanded;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.depth;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.key;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.length;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.restoreExpanded;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.showTypeHeadings;\n/** @type {?} */\nNgxJsonViewerComponent.prototype._currentDepth;\n/** @type {?} */\nNgxJsonViewerComponent.prototype._previouslyOpenKeys;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.nextOpenKeys;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.segments;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.underscoreRegex;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.childrenComponents;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":";;;AESA,MAAA,sBAAA,CAAA;IAAA,WAAA,GAAA;QAIU,IAAV,CAAA,QAAU,GAAW,IAAA,CAAK;QAChB,IAAV,CAAA,KAAU,GAAQ,CAAA,CAAE,CAAC;QACX,IAAV,CAAA,GAAU,GAAM,QAAA,CAAS;QAEf,IAAV,CAAA,MAAU,GAAS,CAAA,CAAE,CAAC;QACZ,IAAV,CAAA,eAAU,GAAkB,KAAA,CAAM;QAExB,IAAV,CAAA,gBAAU,GAAmB,KAAA,CAAM;QAEzB,IAAV,CAAA,aAAU,GAAgB,CAAA,CAAE,CAAC;QAGpB,IAAT,CAAA,YAAS,GAAqC,EAAA,CAAG;QACxC,IAAT,CAAA,QAAS,GAAuB,EAAA,CAAG;QAGzB,IAAV,CAAA,eAAU,GAAkB,SAAA,CAAU;KA+UrC;;;;IAzUE,oBAAA,GAAH;QANI,uBAOM,QAAA,GAAiC,EAAA,CAAG;QAN1C,IAAI,CAOC,kBAAC,CAAkB,OAAC,CAAO,CAAC,SAAW,KAPhD;;;YAGM,QAAQ,CAOC,SAAC,CAAS,GAAC,GAAK,GAAA,GAAM,SAAA,CAAU,MAAC,CAAM,GAAG,SAAA,CAAU,oBAAC,EAAoB,CAAE;SANrF,CAOC,CAAC;QALH,IAAI,MAOC,CAAM,IAAC,CAAI,QAAC,CAAQ,CAAC,MAAC,KAAU,CAAA,EAAG;YANtC,OAAO;SACR;QACD,OAOO,QAAA,CAAS;KANjB;;;;IASA,YAAA,GAAH;QAJI,uBAKM,IAAA,GAAO,MAAA,CAAO,IAAC,oBAAI,IAAC,CAAI,mBAAC,GAAoB,CAAC;QAJpD,IAAI,CAKC,OAAC,CAAO,GAAC,IALlB;;YAEM,uBAKM,WAAA,GAAc,GAAA,CAAI,OAAC,CAAO,IAAC,CAAI,eAAC,EAAgB,EAAA,CAAG,CAAC;YAJ1D,uBAKM,YAAA,GAAe,IAAA,CAAK,QAAC,CAAQ,IAAC,CAAI,OAAC,IAL/C;gBACQ,OAKO,OAAA,CAAQ,GAAC,KAAO,WAAA,CAAY;aAJpC,CAKC,CAAC;YAHH,IAAI,CAKC,YAAC,EAAa;gBAJjB,OAAO;aACR;YAED,IAAI,CAKC,IAAC,CAAI,YAAC,CAAY,YAAC,CAAY,EAAE;gBAJpC,OAAO;aACR;YAED,YAAY,CAKC,QAAC,GAAU,IAAA,CAAK;SAJ9B,CAKC,CAAC;KAJJ;;;;IAOA,WAAA,GAAH;;;QAAI,IAAI,IAGC,CAAI,eAAC,IAAkB,IAAA,CAAK,kBAAC,EAAmB;YAFnD,IAAI,CAGC,mBAAC,GAAqB,IAAA,CAAK,oBAAC,EAAoB,CAAE;YAFvD,OAAO,CAGC,GAAC,CAAG,IAAC,CAAI,mBAAC,CAAmB,CAAC;SAFvC;QAED,IAAI,CAGC,QAAC,GAAU,EAAA,CAAG;;QAAnB,IAAI,CAGC,IAAC,GAAM,IAAA,CAAK,OAAC,CAAO,IAAC,CAAI,IAAC,CAAI,CAAC;QADpC,IAAI,CAGC,aAAC,EAAa,CAAE;QADrB,IAAI,OAGO,IAAA,CAAK,IAAC,KAAQ,QAAA,EAAU;YAFjC,MAAM,CAGC,IAAC,CAAI,IAAC,CAAI,IAAC,CAAI,CAAC,OAAC,CAAO,GAAC,IAHtC;gBACQ,IAAI,CAGC,QAAC,CAAQ,IAAC,CAAI,IAAC,CAAI,aAAC,CAAa,GAAC,EAAI,IAAA,CAAK,IAAC,CAAI,GAAC,CAAG,CAAC,CAAC,CAAC;aAF7D,CAGC,CAAC;SAFJ;aAGM;YAFL,IAAI,CAGC,QAAC,CAAQ,IAAC,CAAI,IAAC,CAAI,aAAC,CAAa,CAH5C,CAAA,EAG6C,OAAU,IAAA,CAAK,IAAC,CAH7D,CAAA,CAGiE,EAAI,IAAA,CAAK,IAAC,CAAI,CAAC,CAAC;SAF5E;QAED,IAAI,CAGC,IAAC,CAAI,mBAAC,EAAoB;YAF7B,OAAO;SACR;aAGM;YAFL,IAAI,CAGC,YAAC,EAAY,CAAE;SAFrB;KACF;;;;;IAKA,YAAA,CAAA,OAAA,EAAH;QACI,OAAO,OAAA,CAAQ,IAAC,KAAQ,QAAA,IAAY,OAAA,CAAQ,IAAC,KAAQ,OAAA,CAAQ;KAC9D;;;;;IAEA,MAAA,CAAA,OAAA,EAAH;QAII,IAAI,IAHC,CAAI,YAAC,CAAY,OAAC,CAAO,EAAE;YAI9B,OAAO,CAHC,QAAC,GAAU,CAAA,OAAE,CAAO,QAAC,CAAQ;SAItC;KACF;;;;;;IADA,aAAA,CAAA,GAAA,EAAA,KAAA,EAAH;QAQI,uBAPM,OAAA,GAAoB;YAQxB,GAAG,EAPE,GAAA;YAQL,KAAK,EAPE,KAAA;YAQP,IAAI,EAPE,SAAA;YAQN,WAAW,EAPE,EAAA,GAAK,KAAA;YAQlB,QAAQ,EAPE,IAAA,CAAK,UAAC,EAAU;SAQ3B,CAPC;QASF,QAAQ,OAPO,OAAA,CAAQ,KAAC;YAQtB,KAPK,QAAA,EAAU;gBAQb,OAAO,CAPC,IAAC,GAAM,QAAA,CAAS;gBAQxB,MAAM;aACP;YACD,KAPK,SAAA,EAAW;gBAQd,OAAO,CAPC,IAAC,GAAM,SAAA,CAAU;gBAQzB,MAAM;aACP;YACD,KAPK,UAAA,EAAY;gBAQf,OAAO,CAPC,IAAC,GAAM,UAAA,CAAW;gBAQ1B,MAAM;aACP;YACD,KAPK,QAAA,EAAU;gBAQb,OAAO,CAPC,IAAC,GAAM,QAAA,CAAS;gBAQxB,OAAO,CAPC,WAAC,GAAa,GAAA,GAAM,OAAA,CAAQ,KAAC,GAAO,GAAA,CAAI;gBAQhD,MAAM;aACP;YACD,KAPK,WAAA,EAAa;gBAQhB,OAAO,CAPC,IAAC,GAAM,WAAA,CAAY;gBAQ3B,OAAO,CAPC,WAAC,GAAa,WAAA,CAAY;gBAQlC,MAAM;aACP;YACD,KAPK,QAAA,EAAU;;gBASb,IAAI,OAPC,CAAO,KAAC,KAAS,IAAA,EAAM;oBAQ1B,OAAO,CAPC,IAAC,GAAM,MAAA,CAAO;oBAQtB,OAAO,CAPC,WAAC,GAAa,MAAA,CAAO;iBAQ9B;qBAPM,IAAA,KAAK,CAAK,OAAC,CAAO,OAAC,CAAO,KAAC,CAAK,EAAE;oBAQvC,OAAO,CAPC,IAAC,GAAM,OAAA,CAAQ;oBAQvB,OAAO,CAPC,WAAC;wBAQP,QAAQ,GAPG,OAAA,CAAQ,KAAC,CAAK,MAAC,GAAQ,IAAA,GAAO,IAAA,CAAK,SAAC,CAAS,OAAC,CAAO,KAAC,CAAK,CAAC;iBAQ1E;qBAPM,IAAA,OAAK,CAAO,KAAC,YAAgB,IAAA,EAAM;oBAQxC,OAAO,CAPC,IAAC,GAAM,MAAA,CAAO;iBAQvB;qBAPM;oBAQL,OAAO,CAPC,IAAC,GAAM,QAAA,CAAS;oBAQxB,OAAO,CAPC,WAAC,GAAa,SAAA,GAAY,IAAA,CAAK,SAAC,CAAS,OAAC,CAAO,KAAC,CAAK,CAAC;iBAQjE;gBACD,MAAM;aACP;SACF;QAED,OAPO,OAAA,CAAQ;KAQhB;;;;IALA,UAAA,GAAH;QAUI,OATO,IAAA,CAAK,QAAC,IAAW,EAAE,IAAC,CAAI,KAAC,GAAO,CAAA,CAAE,IAAI,IAAA,CAAK,aAAC,IAAgB,IAAA,CAAK,KAAC,CAAK,CAAC;KAUhF;;;;;IANA,OAAA,CAAA,MAAA,EAAH;QAYI,uBAXM,OAAA,GAAU,IAAI,OAAA,EAAQ,CAAE;QAY9B,OAXO,CAAA,SAWX,KAAA,CAX2B,KAAO,EAAK,IAAM,EAW7C;YACM,qBAXI,OAAA,CAAQ;YAYZ,qBAXI,EAAI,CAAI;YAaZ,IACE,OAXO,KAAA,KAAU,QAAA;gBAYjB,KAAK,KAXK,IAAA;gBAYV,EAXE,KAAC,YAAgB,OAAA,CAAQ;gBAY3B,EAXE,KAAC,YAAgB,IAAA,CAAK;gBAYxB,EAXE,KAAC,YAAgB,MAAA,CAAO;gBAY1B,EAXE,KAAC,YAAgB,MAAA,CAAO;gBAY1B,EAXE,KAAC,YAAgB,MAAA,CAYrB,EAXE;gBAYA,OAAO,GAXG,OAAA,CAAQ,GAAC,CAAG,KAAC,CAAK,CAAC;gBAY7B,IAAI,OAXC,KAAW,SAAA,EAAW;oBAYzB,OAXO,EAAA,IAAE,EAAK,OAAA,EAAQ,CAAC;iBAYxB;gBACD,OAAO,CAXC,GAAC,CAAG,KAAC,EAAM,IAAA,CAAK,CAAC;gBAazB,IAAI,KAXC,CAAK,OAAC,CAAO,KAAC,CAAK,EAAE;oBAYxB,EAAE,GAXG,EAAA,CAAG;oBAYR,KAAK,CAXC,OAAC,CAAO,CAAC,OAAC,EAAQ,CAAA,KAWlC;wBACY,EAAE,CAXC,CAAC,CAAC,GAAG,KAAA,CAAM,OAAC,EAAQ,IAAA,GAAO,GAAA,GAAM,CAAA,GAAI,GAAA,CAAI,CAAC;qBAY9C,CAXC,CAAC;iBAYJ;qBAXM;oBAYL,EAAE,GAXG,EAAA,CAAG;oBAYR,MAAM,CAXC,IAAC,CAAI,KAAC,CAAK,CAAC,OAAC,CAAO,IAAC,IAWtC;wBACY,EAAE,CAXC,IAAC,CAAI,GAAG,KAAA,CAAM,KAAC,CAAK,IAAC,CAAI,EAAE,IAAA,GAAO,GAAA,GAAM,IAAA,CAAK,SAAC,CAAS,IAAC,CAAI,GAAG,GAAA,CAAI,CAAC;qBAYxE,CAXC,CAAC;iBAYJ;gBACD,OAXO,EAAA,CAAG;aAYX;YACD,OAXO,KAAA,CAAM;SAYd,EAXE,MAAC,EAAO,GAAA,CAAI,CAAC;KAYjB;;AAVI,sBAAP,CAAA,UAAO,GAAoC;IAY3C,EAXE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAYvB,QAAQ,EAXE,iBAAA;gBAYV,QAAQ,EAXE,CAWZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgDA,CAAG;gBACD,MAAM,EAXE,CAAA,CAWV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2EA,CAAG,CAXC;aAYH,EAXC,EAAG;CAYJ,CAXC;;;;AAED,sBAAD,CAAA,cAAC,GAAA,MAAA,EAcA,CAlBC;AAMK,sBAAP,CAAA,cAAO,GAAyD;IAchE,MAAM,EAbE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAczB,UAAU,EAbE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAc7B,OAAO,EAbE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAc1B,KAAK,EAbE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAcxB,QAAQ,EAbE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAc3B,iBAAiB,EAbE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAcpC,kBAAkB,EAbE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAcrC,eAAe,EAbE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAclC,qBAAqB,EAbE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAcxC,oBAAoB,EAbE,CAAA,EAAG,IAAA,EAAM,YAAA,EAAc,IAAA,EAAM,CAAA,sBAAE,EAAsB,EAAG,EAAE;CAc/E,CAbC;;AD1VF,MAAA,mBAAA,CAAA;;AAE0C,mBAA1C,CAAA,UAA0C,GAAoC;IAD9E,EAEE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBADtB,OAAO,EAEE;oBADP,YAAY;iBACb;gBACD,YAAY,EAEE;oBADZ,sBAAsB;iBACvB;gBACD,OAAO,EAEE;oBADP,sBAAsB;iBACvB;aACF,EAEC,EAAG;CADJ,CAEC;;;;AAED,mBAAD,CAAA,cAAC,GAAA,MAAA,EACA,CAAC;;ADrBF;;GAEG;;;;"}
