{"version":3,"file":"ngx-json-viewer.umd.min.js","sources":["~/ngx-json-viewer/src/ngx-json-viewer/ngx-json-viewer.component.ts","~/ngx-json-viewer/src/ngx-json-viewer.module.ts"],"sourcesContent":["import {Component, OnChanges, Input, ViewChildren, QueryList} from '@angular/core';\n\nexport interface ISegment {\n  key: string;\n  value: any;\n  type: undefined | string;\n  description: string;\n  expanded: boolean;\n}\n\n@Component({\n  selector: 'ngx-json-viewer',\n  template: `\n    <section class=\"ngx-json-viewer\">\n      <section *ngFor=\"let segment of segments\" [ngClass]=\"['segment', 'segment-type-' + segment.type]\">\n        <section\n          (click)=\"toggle(segment)\"\n          [ngClass]=\"{\n            'segment-main': true,\n            expandable: isExpandable(segment),\n            expanded: segment.expanded\n          }\"\n        >\n          <div *ngIf=\"isExpandable(segment)\" class=\"toggler\"></div>\n          <span class=\"segment-key\">{{ segment.key }}</span>\n          <span class=\"segment-separator\">: </span>\n          <span *ngIf=\"!segment.expanded || !isExpandable(segment)\" class=\"segment-value\">{{\n            segment.description\n          }}</span>\n          <span\n            *ngIf=\"showTypeHeadings && segment.expanded && segment.type == 'array'\"\n            class=\"segment-value\"\n            >Array[{{ segment.value.length }}]</span\n          >\n          <span\n            *ngIf=\"showTypeHeadings && segment.expanded && segment.type == 'object'\"\n            class=\"segment-value\"\n            >Object</span\n          >\n        </section>\n        <section *ngIf=\"segment.expanded && isExpandable(segment)\" class=\"children\">\n          <ngx-json-viewer\n            [json]=\"segment.value\"\n            [expanded]=\"expanded\"\n            [depth]=\"depth\"\n            [_currentDepth]=\"_currentDepth\"\n            [key]=\"segment.key\"\n            [length]=\"segment.type === 'array' ? segment.value.length : -1\"\n            [_previouslyOpenKeys]=\"\n              _previouslyOpenKeys &&\n              _previouslyOpenKeys[\n                segment.type === 'array'\n                  ? segment.key + '_' + segment.value.length\n                  : segment.key + '_-1'\n              ]\n            \"\n          ></ngx-json-viewer>\n        </section>\n      </section>\n    </section>\n  `,\n  styles: [`\n    @charset \"UTF-8\";\n    .ngx-json-viewer {\n      font-family: monospace;\n      font-size: 1em;\n      width: 100%;\n      height: 100%;\n      overflow: hidden;\n      position: relative; }\n      .ngx-json-viewer .segment {\n        padding: 0px;\n        margin: 0px 0px 1px 12px; }\n        .ngx-json-viewer .segment .segment-main {\n          word-wrap: break-word; }\n          .ngx-json-viewer .segment .segment-main .toggler {\n            position: absolute;\n            margin-left: -14px;\n            margin-top: 3px;\n            font-size: .8em;\n            line-height: 1.2em;\n            vertical-align: middle;\n            color: #787878; }\n            .ngx-json-viewer .segment .segment-main .toggler::after {\n              display: inline-block;\n              content: \"â–º\";\n              -webkit-transition: -webkit-transform 0.1s ease-in;\n              transition: -webkit-transform 0.1s ease-in;\n              transition: transform 0.1s ease-in;\n              transition: transform 0.1s ease-in, -webkit-transform 0.1s ease-in; }\n          .ngx-json-viewer .segment .segment-main .segment-key {\n            color: #00008b;\n            word-wrap: break-word;\n            white-space: pre-line; }\n          .ngx-json-viewer .segment .segment-main .segment-separator {\n            color: #00008b; }\n          .ngx-json-viewer .segment .segment-main .segment-value {\n            color: #000; }\n        .ngx-json-viewer .segment .children {\n          margin-left: 4px; }\n      .ngx-json-viewer .segment-type-string > .segment-main > .segment-value {\n        color: green; }\n      .ngx-json-viewer .segment-type-number > .segment-main > .segment-value {\n        color: #0000ff; }\n      .ngx-json-viewer .segment-type-boolean > .segment-main > .segment-value {\n        color: red; }\n      .ngx-json-viewer .segment-type-date > .segment-main > .segment-value {\n        color: #05668D; }\n      .ngx-json-viewer .segment-type-array > .segment-main > .segment-value {\n        color: #999; }\n      .ngx-json-viewer .segment-type-object > .segment-main > .segment-value {\n        color: #999; }\n      .ngx-json-viewer .segment-type-function > .segment-main > .segment-value {\n        color: #999; }\n      .ngx-json-viewer .segment-type-null > .segment-main > .segment-value {\n        color: #855a00; }\n      .ngx-json-viewer .segment-type-undefined > .segment-main > .segment-value {\n        color: #855a00; }\n      .ngx-json-viewer .segment-type-undefined > .segment-main > .segment-key {\n        color: #999; }\n      .ngx-json-viewer .segment-type-undefined > .segment-main > .segment-value {\n        background-color: #999; }\n      .ngx-json-viewer .segment-type-object > .segment-main,\n      .ngx-json-viewer .segment-type-array > .segment-main {\n        white-space: nowrap; }\n      .ngx-json-viewer .expanded > .toggler::after {\n        -webkit-transform: rotate(90deg);\n                transform: rotate(90deg); }\n      .ngx-json-viewer .expandable > .segment-value {\n        display: inline-block;\n        vertical-align: bottom;\n        text-overflow: ellipsis;\n        overflow: hidden; }\n      .ngx-json-viewer .expandable,\n      .ngx-json-viewer .expandable > .toggler {\n        cursor: pointer; }\n  `]\n})\nexport class NgxJsonViewerComponent implements OnChanges {\n  @Input() public json: any;\n  @Input() public expanded = true;\n  @Input() public depth = -1;\n  @Input() public key = 'Object';\n  // Tracks the length of array types. -1 for other types\n  @Input() public length = -1;\n  @Input() public restoreExpanded = false;\n\n  @Input() public showTypeHeadings = false;\n\n  @Input() public _currentDepth = -1;\n  @Input() public _previouslyOpenKeys?: {[key: string]: any};\n\n  public nextOpenKeys: {[key: string]: any} = {};\n  public segments: ISegment[] = [];\n\n  // Matches the last underscore in a string\n  private underscoreRegex = /_[^_]+$/;\n\n  @ViewChildren(NgxJsonViewerComponent) public childrenComponents: QueryList<\n  NgxJsonViewerComponent\n  >;\n\n  private getOpenKeysRecursive(): any {\n    const openKeys: {[key: string]: any} = {};\n    this.childrenComponents.forEach((component: NgxJsonViewerComponent) => {\n      // Save key and length - on reload array elements should only be reopened if\n      // the array is the same length\n      openKeys[component.key + '_' + component.length] = component.getOpenKeysRecursive();\n    });\n\n    if (Object.keys(openKeys).length === 0) {\n      return;\n    }\n    return openKeys;\n  }\n\n  private openSegments(): void {\n    const keys = Object.keys(this._previouslyOpenKeys!);\n    keys.forEach(key => {\n      // Check to see if the key exists, if so expands it\n      const strippedKey = key.replace(this.underscoreRegex, '');\n      const foundSegment = this.segments.find(segment => {\n        return segment.key === strippedKey;\n      });\n\n      if (!foundSegment) {\n        return;\n      }\n\n      if (!this.isExpandable(foundSegment)) {\n        return;\n      }\n\n      foundSegment.expanded = true;\n    });\n  }\n\n  public ngOnChanges(): void {\n    // Save open keys structure before processing new json\n    // Will only run in top level\n    if (this.restoreExpanded && this.childrenComponents) {\n      this._previouslyOpenKeys = this.getOpenKeysRecursive();\n      console.log(this._previouslyOpenKeys);\n    }\n\n    this.segments = [];\n\n    // remove cycles\n    this.json = this.decycle(this.json);\n\n    this._currentDepth++;\n\n    if (typeof this.json === 'object') {\n      Object.keys(this.json).forEach(key => {\n        this.segments.push(this.parseKeyValue(key, this.json[key]));\n      });\n    } else {\n      this.segments.push(this.parseKeyValue(`(${typeof this.json})`, this.json));\n    }\n\n    if (!this._previouslyOpenKeys) {\n      return;\n    } else {\n      this.openSegments();\n    }\n  }\n\n  public isExpandable(segment: ISegment): any {\n    return segment.type === 'object' || segment.type === 'array';\n  }\n\n  public toggle(segment: ISegment): any {\n    if (this.isExpandable(segment)) {\n      segment.expanded = !segment.expanded;\n    }\n  }\n\n  private parseKeyValue(key: any, value: any): ISegment {\n    const segment: ISegment = {\n      key: key,\n      value: value,\n      type: undefined,\n      description: '' + value,\n      expanded: this.isExpanded(),\n    };\n\n    switch (typeof segment.value) {\n      case 'number': {\n        segment.type = 'number';\n        break;\n      }\n      case 'boolean': {\n        segment.type = 'boolean';\n        break;\n      }\n      case 'function': {\n        segment.type = 'function';\n        break;\n      }\n      case 'string': {\n        segment.type = 'string';\n        segment.description = '\"' + segment.value + '\"';\n        break;\n      }\n      case 'undefined': {\n        segment.type = 'undefined';\n        segment.description = 'undefined';\n        break;\n      }\n      case 'object': {\n        // yea, null is object\n        if (segment.value === null) {\n          segment.type = 'null';\n          segment.description = 'null';\n        } else if (Array.isArray(segment.value)) {\n          segment.type = 'array';\n          segment.description =\n            'Array[' + segment.value.length + '] ' + JSON.stringify(segment.value);\n        } else if (segment.value instanceof Date) {\n          segment.type = 'date';\n        } else {\n          segment.type = 'object';\n          segment.description = 'Object ' + JSON.stringify(segment.value);\n        }\n        break;\n      }\n    }\n\n    return segment;\n  }\n\n  private isExpanded(): boolean {\n    return this.expanded && !(this.depth > -1 && this._currentDepth >= this.depth);\n  }\n\n  // https://github.com/douglascrockford/JSON-js/blob/master/cycle.js\n  private decycle(object: any): any {\n    const objects = new WeakMap();\n    return (function derez(value: any, path: any): any {\n      let oldPath;\n      let nu: any;\n\n      if (\n        typeof value === 'object' &&\n        value !== null &&\n        !(value instanceof Boolean) &&\n        !(value instanceof Date) &&\n        !(value instanceof Number) &&\n        !(value instanceof RegExp) &&\n        !(value instanceof String)\n      ) {\n        oldPath = objects.get(value);\n        if (oldPath !== undefined) {\n          return {$ref: oldPath};\n        }\n        objects.set(value, path);\n\n        if (Array.isArray(value)) {\n          nu = [];\n          value.forEach((element, i) => {\n            nu[i] = derez(element, path + '[' + i + ']');\n          });\n        } else {\n          nu = {};\n          Object.keys(value).forEach(name => {\n            nu[name] = derez(value[name], path + '[' + JSON.stringify(name) + ']');\n          });\n        }\n        return nu;\n      }\n      return value;\n    })(object, '$');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgxJsonViewerComponent } from './ngx-json-viewer/ngx-json-viewer.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgxJsonViewerComponent\n  ],\n  exports: [\n    NgxJsonViewerComponent\n  ]\n})\nexport class NgxJsonViewerModule { }\n"],"names":["NgxJsonViewerComponent","prototype","getOpenKeysRecursive","openKeys","this","childrenComponents","forEach","component","key","length","Object","keys","openSegments","_this","strippedKey","replace","underscoreRegex","foundSegment","segments","find","segment","isExpandable","expanded","ngOnChanges","restoreExpanded","_previouslyOpenKeys","console","log","json","decycle","_currentDepth","push","parseKeyValue","type","toggle","value","undefined","description","isExpanded","Array","isArray","JSON","stringify","Date","depth","object","objects","WeakMap","derez","path","oldPath","nu","Boolean","Number","RegExp","String","get","$ref","set","element","i","name","showTypeHeadings","nextOpenKeys","decorators","Component","args","selector","template","styles","ctorParameters","propDecorators","Input","ViewChildren","NgxJsonViewerModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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"}
