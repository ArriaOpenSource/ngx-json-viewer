{"version":3,"file":"ngx-json-viewer.umd.min.js","sources":["~/ngx-json-viewer/src/ngx-json-viewer/ngx-json-viewer.component.ts","~/ngx-json-viewer/src/ngx-json-viewer.module.ts"],"sourcesContent":["import {Component, OnChanges, Input, ViewChildren, QueryList} from '@angular/core';\n\nexport interface ISegment {\n  key: string;\n  value: any;\n  type: undefined | string;\n  description: string;\n  expanded: boolean;\n}\nexport class NgxJsonViewerComponent implements OnChanges {\npublic json: any;\npublic expanded = true;\npublic depth = -1;\npublic key = 'Object';\npublic length = -1;\npublic restoreExpanded = false;\npublic showTypeHeadings = false;\npublic _currentDepth = -1;\npublic _previouslyOpenKeys?: {[key: string]: any};\npublic nextOpenKeys: {[key: string]: any} = {};\npublic segments: ISegment[] = [];\nprivate underscoreRegex = /_[^_]+$/;\npublic childrenComponents: QueryList<\n  NgxJsonViewerComponent\n  >;\n/**\n * @return {?}\n */\nprivate getOpenKeysRecursive(): any {\n    const /** @type {?} */ openKeys: {[key: string]: any} = {};\n    this.childrenComponents.forEach((component: NgxJsonViewerComponent) => {\n      // Save key and length - on reload array elements should only be reopened if\n      // the array is the same length\n      openKeys[component.key + '_' + component.length] = component.getOpenKeysRecursive();\n    });\n\n    if (Object.keys(openKeys).length === 0) {\n      return;\n    }\n    return openKeys;\n  }\n/**\n * @return {?}\n */\nprivate openSegments(): void {\n    const /** @type {?} */ keys = Object.keys( /** @type {?} */((this._previouslyOpenKeys)));\n    keys.forEach(key => {\n      // Check to see if the key exists, if so expands it\n      const /** @type {?} */ strippedKey = key.replace(this.underscoreRegex, '');\n      const /** @type {?} */ foundSegment = this.segments.find(segment => {\n        return segment.key === strippedKey;\n      });\n\n      if (!foundSegment) {\n        return;\n      }\n\n      if (!this.isExpandable(foundSegment)) {\n        return;\n      }\n\n      foundSegment.expanded = true;\n    });\n  }\n/**\n * @return {?}\n */\npublic ngOnChanges(): void {\n    // Save open keys structure before processing new json\n    // Will only run in top level\n    if (this.restoreExpanded && this.childrenComponents) {\n      this._previouslyOpenKeys = this.getOpenKeysRecursive();\n      console.log(this._previouslyOpenKeys);\n    }\n\n    this.segments = [];\n\n    // remove cycles\n    this.json = this.decycle(this.json);\n\n    this._currentDepth++;\n\n    if (typeof this.json === 'object') {\n      Object.keys(this.json).forEach(key => {\n        this.segments.push(this.parseKeyValue(key, this.json[key]));\n      });\n    } else {\n      this.segments.push(this.parseKeyValue(`(${typeof this.json})`, this.json));\n    }\n\n    if (!this._previouslyOpenKeys) {\n      return;\n    } else {\n      this.openSegments();\n    }\n  }\n/**\n * @param {?} segment\n * @return {?}\n */\npublic isExpandable(segment: ISegment): any {\n    return segment.type === 'object' || segment.type === 'array';\n  }\n/**\n * @param {?} segment\n * @return {?}\n */\npublic toggle(segment: ISegment): any {\n    if (this.isExpandable(segment)) {\n      segment.expanded = !segment.expanded;\n    }\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nprivate parseKeyValue(key: any, value: any): ISegment {\n    const /** @type {?} */ segment: ISegment = {\n      key: key,\n      value: value,\n      type: undefined,\n      description: '' + value,\n      expanded: this.isExpanded(),\n    };\n\n    switch (typeof segment.value) {\n      case 'number': {\n        segment.type = 'number';\n        break;\n      }\n      case 'boolean': {\n        segment.type = 'boolean';\n        break;\n      }\n      case 'function': {\n        segment.type = 'function';\n        break;\n      }\n      case 'string': {\n        segment.type = 'string';\n        segment.description = '\"' + segment.value + '\"';\n        break;\n      }\n      case 'undefined': {\n        segment.type = 'undefined';\n        segment.description = 'undefined';\n        break;\n      }\n      case 'object': {\n        // yea, null is object\n        if (segment.value === null) {\n          segment.type = 'null';\n          segment.description = 'null';\n        } else if (Array.isArray(segment.value)) {\n          segment.type = 'array';\n          segment.description =\n            'Array[' + segment.value.length + '] ' + JSON.stringify(segment.value);\n        } else if (segment.value instanceof Date) {\n          segment.type = 'date';\n        } else {\n          segment.type = 'object';\n          segment.description = 'Object ' + JSON.stringify(segment.value);\n        }\n        break;\n      }\n    }\n\n    return segment;\n  }\n/**\n * @return {?}\n */\nprivate isExpanded(): boolean {\n    return this.expanded && !(this.depth > -1 && this._currentDepth >= this.depth);\n  }\n/**\n * @param {?} object\n * @return {?}\n */\nprivate decycle(object: any): any {\n    const /** @type {?} */ objects = new WeakMap();\n    return (function derez(value: any, path: any): any {\n      let /** @type {?} */ oldPath;\n      let /** @type {?} */ nu: any;\n\n      if (\n        typeof value === 'object' &&\n        value !== null &&\n        !(value instanceof Boolean) &&\n        !(value instanceof Date) &&\n        !(value instanceof Number) &&\n        !(value instanceof RegExp) &&\n        !(value instanceof String)\n      ) {\n        oldPath = objects.get(value);\n        if (oldPath !== undefined) {\n          return {$ref: oldPath};\n        }\n        objects.set(value, path);\n\n        if (Array.isArray(value)) {\n          nu = [];\n          value.forEach((element, i) => {\n            nu[i] = derez(element, path + '[' + i + ']');\n          });\n        } else {\n          nu = {};\n          Object.keys(value).forEach(name => {\n            nu[name] = derez(value[name], path + '[' + JSON.stringify(name) + ']');\n          });\n        }\n        return nu;\n      }\n      return value;\n    })(object, '$');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngx-json-viewer',\n  template: `\n    <section class=\"ngx-json-viewer\">\n      <section *ngFor=\"let segment of segments\" [ngClass]=\"['segment', 'segment-type-' + segment.type]\">\n        <section\n          (click)=\"toggle(segment)\"\n          [ngClass]=\"{\n            'segment-main': true,\n            expandable: isExpandable(segment),\n            expanded: segment.expanded\n          }\"\n        >\n          <div *ngIf=\"isExpandable(segment)\" class=\"toggler\"></div>\n          <span class=\"segment-key\">{{ segment.key }}</span>\n          <span class=\"segment-separator\">: </span>\n          <span *ngIf=\"!segment.expanded || !isExpandable(segment)\" class=\"segment-value\">{{\n            segment.description\n          }}</span>\n          <span\n            *ngIf=\"showTypeHeadings && segment.expanded && segment.type == 'array'\"\n            class=\"segment-value\"\n            >Array[{{ segment.value.length }}]</span\n          >\n          <span\n            *ngIf=\"showTypeHeadings && segment.expanded && segment.type == 'object'\"\n            class=\"segment-value\"\n            >Object</span\n          >\n        </section>\n        <section *ngIf=\"segment.expanded && isExpandable(segment)\" class=\"children\">\n          <ngx-json-viewer\n            [json]=\"segment.value\"\n            [expanded]=\"expanded\"\n            [depth]=\"depth\"\n            [_currentDepth]=\"_currentDepth\"\n            [key]=\"segment.key\"\n            [length]=\"segment.type === 'array' ? segment.value.length : -1\"\n            [_previouslyOpenKeys]=\"\n              _previouslyOpenKeys &&\n              _previouslyOpenKeys[\n                segment.type === 'array'\n                  ? segment.key + '_' + segment.value.length\n                  : segment.key + '_-1'\n              ]\n            \"\n          ></ngx-json-viewer>\n        </section>\n      </section>\n    </section>\n  `,\n  styles: [`\n    @charset \"UTF-8\";\n    .ngx-json-viewer {\n      font-family: monospace;\n      font-size: 1em;\n      width: 100%;\n      height: 100%;\n      overflow: hidden;\n      position: relative; }\n      .ngx-json-viewer .segment {\n        padding: 0px;\n        margin: 0px 0px 1px 12px; }\n        .ngx-json-viewer .segment .segment-main {\n          word-wrap: break-word; }\n          .ngx-json-viewer .segment .segment-main .toggler {\n            position: absolute;\n            margin-left: -14px;\n            margin-top: 3px;\n            font-size: .8em;\n            line-height: 1.2em;\n            vertical-align: middle;\n            color: #787878; }\n            .ngx-json-viewer .segment .segment-main .toggler::after {\n              display: inline-block;\n              content: \"â–º\";\n              -webkit-transition: -webkit-transform 0.1s ease-in;\n              transition: -webkit-transform 0.1s ease-in;\n              transition: transform 0.1s ease-in;\n              transition: transform 0.1s ease-in, -webkit-transform 0.1s ease-in; }\n          .ngx-json-viewer .segment .segment-main .segment-key {\n            color: #00008b;\n            word-wrap: break-word;\n            white-space: pre-line; }\n          .ngx-json-viewer .segment .segment-main .segment-separator {\n            color: #00008b; }\n          .ngx-json-viewer .segment .segment-main .segment-value {\n            color: #000; }\n        .ngx-json-viewer .segment .children {\n          margin-left: 4px; }\n      .ngx-json-viewer .segment-type-string > .segment-main > .segment-value {\n        color: green; }\n      .ngx-json-viewer .segment-type-number > .segment-main > .segment-value {\n        color: #0000ff; }\n      .ngx-json-viewer .segment-type-boolean > .segment-main > .segment-value {\n        color: red; }\n      .ngx-json-viewer .segment-type-date > .segment-main > .segment-value {\n        color: #05668D; }\n      .ngx-json-viewer .segment-type-array > .segment-main > .segment-value {\n        color: #999; }\n      .ngx-json-viewer .segment-type-object > .segment-main > .segment-value {\n        color: #999; }\n      .ngx-json-viewer .segment-type-function > .segment-main > .segment-value {\n        color: #999; }\n      .ngx-json-viewer .segment-type-null > .segment-main > .segment-value {\n        color: #855a00; }\n      .ngx-json-viewer .segment-type-undefined > .segment-main > .segment-value {\n        color: #855a00; }\n      .ngx-json-viewer .segment-type-undefined > .segment-main > .segment-key {\n        color: #999; }\n      .ngx-json-viewer .segment-type-undefined > .segment-main > .segment-value {\n        background-color: #999; }\n      .ngx-json-viewer .segment-type-object > .segment-main,\n      .ngx-json-viewer .segment-type-array > .segment-main {\n        white-space: nowrap; }\n      .ngx-json-viewer .expanded > .toggler::after {\n        -webkit-transform: rotate(90deg);\n                transform: rotate(90deg); }\n      .ngx-json-viewer .expandable > .segment-value {\n        display: inline-block;\n        vertical-align: bottom;\n        text-overflow: ellipsis;\n        overflow: hidden; }\n      .ngx-json-viewer .expandable,\n      .ngx-json-viewer .expandable > .toggler {\n        cursor: pointer; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'json': [{ type: Input },],\n'expanded': [{ type: Input },],\n'depth': [{ type: Input },],\n'key': [{ type: Input },],\n'length': [{ type: Input },],\n'restoreExpanded': [{ type: Input },],\n'showTypeHeadings': [{ type: Input },],\n'_currentDepth': [{ type: Input },],\n'_previouslyOpenKeys': [{ type: Input },],\n'childrenComponents': [{ type: ViewChildren, args: [NgxJsonViewerComponent, ] },],\n};\n}\n\nfunction NgxJsonViewerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxJsonViewerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxJsonViewerComponent.ctorParameters;\n/** @type {?} */\nNgxJsonViewerComponent.propDecorators;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.json;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.expanded;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.depth;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.key;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.length;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.restoreExpanded;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.showTypeHeadings;\n/** @type {?} */\nNgxJsonViewerComponent.prototype._currentDepth;\n/** @type {?} */\nNgxJsonViewerComponent.prototype._previouslyOpenKeys;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.nextOpenKeys;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.segments;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.underscoreRegex;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.childrenComponents;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgxJsonViewerComponent } from './ngx-json-viewer/ngx-json-viewer.component';\nexport class NgxJsonViewerModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgxJsonViewerComponent\n  ],\n  exports: [\n    NgxJsonViewerComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgxJsonViewerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxJsonViewerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxJsonViewerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["NgxJsonViewerComponent","this","expanded","depth","key","length","restoreExpanded","showTypeHeadings","_currentDepth","nextOpenKeys","segments","underscoreRegex","prototype","getOpenKeysRecursive","openKeys","childrenComponents","forEach","component","Object","keys","openSegments","_this","strippedKey","replace","foundSegment","find","segment","isExpandable","ngOnChanges","_previouslyOpenKeys","console","log","json","decycle","push","parseKeyValue","type","toggle","value","undefined","description","isExpanded","Array","isArray","JSON","stringify","Date","object","objects","WeakMap","derez","path","oldPath","nu","Boolean","Number","RegExp","String","get","$ref","set","element","i","name","decorators","Component","args","selector","template","styles","ctorParameters","propDecorators","Input","ViewChildren","NgxJsonViewerModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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"}
