{"version":3,"sources":["../../src/ngx-json-viewer/ngx-json-viewer.component.ts","../../src/ngx-json-viewer.module.ts"],"names":["NgxJsonViewerComponent","this","expanded","depth","key","length","restoreExpanded","showTypeHeadings","_currentDepth","nextOpenKeys","segments","underscoreRegex","prototype","getOpenKeysRecursive","openKeys","childrenComponents","forEach","component","Object","keys","openSegments","_this","_previouslyOpenKeys","strippedKey","replace","foundSegment","find","segment","isExpandable","ngOnChanges","console","log","json","decycle","push","parseKeyValue","type","toggle","value","undefined","description","isExpanded","Array","isArray","JSON","stringify","Date","object","objects","WeakMap","derez","path","oldPath","nu","Boolean","Number","RegExp","String","get","$ref","set","element","i","name","Component","args","selector","template","Input","ViewChildren","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {Component, OnChanges, Input, ViewChildren, QueryList} from '@angular/core';\r\n\r\nexport interface ISegment {\r\n  key: string;\r\n  value: any;\r\n  type: undefined | string;\r\n  description: string;\r\n  expanded: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'ngx-json-viewer',\r\n  templateUrl: './ngx-json-viewer.component.html',\r\n  styleUrls: ['./ngx-json-viewer.component.scss']\r\n})\r\nexport class NgxJsonViewerComponent implements OnChanges {\r\n  @Input() public json: any;\r\n  @Input() public expanded = true;\r\n  @Input() public depth = -1;\r\n  @Input() public key = 'Object';\r\n  // Tracks the length of array types. -1 for other types\r\n  @Input() public length = -1;\r\n  @Input() public restoreExpanded = false;\r\n\r\n  @Input() public showTypeHeadings = false;\r\n\r\n  @Input() public _currentDepth = -1;\r\n  @Input() public _previouslyOpenKeys?: {[key: string]: any};\r\n\r\n  public nextOpenKeys: {[key: string]: any} = {};\r\n  public segments: ISegment[] = [];\r\n\r\n  // Matches the last underscore in a string\r\n  private underscoreRegex = /_[^_]+$/;\r\n\r\n  @ViewChildren(NgxJsonViewerComponent) public childrenComponents: QueryList<\r\n  NgxJsonViewerComponent\r\n  >;\r\n\r\n  private getOpenKeysRecursive(): any {\r\n    const openKeys: {[key: string]: any} = {};\r\n    this.childrenComponents.forEach((component: NgxJsonViewerComponent) => {\r\n      // Save key and length - on reload array elements should only be reopened if\r\n      // the array is the same length\r\n      openKeys[component.key + '_' + component.length] = component.getOpenKeysRecursive();\r\n    });\r\n\r\n    if (Object.keys(openKeys).length === 0) {\r\n      return;\r\n    }\r\n    return openKeys;\r\n  }\r\n\r\n  private openSegments(): void {\r\n    const keys = Object.keys(this._previouslyOpenKeys!);\r\n    keys.forEach(key => {\r\n      // Check to see if the key exists, if so expands it\r\n      const strippedKey = key.replace(this.underscoreRegex, '');\r\n      const foundSegment = this.segments.find(segment => {\r\n        return segment.key === strippedKey;\r\n      });\r\n\r\n      if (!foundSegment) {\r\n        return;\r\n      }\r\n\r\n      if (!this.isExpandable(foundSegment)) {\r\n        return;\r\n      }\r\n\r\n      foundSegment.expanded = true;\r\n    });\r\n  }\r\n\r\n  public ngOnChanges(): void {\r\n    // Save open keys structure before processing new json\r\n    // Will only run in top level\r\n    if (this.restoreExpanded && this.childrenComponents) {\r\n      this._previouslyOpenKeys = this.getOpenKeysRecursive();\r\n      console.log(this._previouslyOpenKeys);\r\n    }\r\n\r\n    this.segments = [];\r\n\r\n    // remove cycles\r\n    this.json = this.decycle(this.json);\r\n\r\n    this._currentDepth++;\r\n\r\n    if (typeof this.json === 'object') {\r\n      Object.keys(this.json).forEach(key => {\r\n        this.segments.push(this.parseKeyValue(key, this.json[key]));\r\n      });\r\n    } else {\r\n      this.segments.push(this.parseKeyValue(`(${typeof this.json})`, this.json));\r\n    }\r\n\r\n    if (!this._previouslyOpenKeys) {\r\n      return;\r\n    } else {\r\n      this.openSegments();\r\n    }\r\n  }\r\n\r\n  public isExpandable(segment: ISegment): any {\r\n    return segment.type === 'object' || segment.type === 'array';\r\n  }\r\n\r\n  public toggle(segment: ISegment): any {\r\n    if (this.isExpandable(segment)) {\r\n      segment.expanded = !segment.expanded;\r\n    }\r\n  }\r\n\r\n  private parseKeyValue(key: any, value: any): ISegment {\r\n    const segment: ISegment = {\r\n      key: key,\r\n      value: value,\r\n      type: undefined,\r\n      description: '' + value,\r\n      expanded: this.isExpanded(),\r\n    };\r\n\r\n    switch (typeof segment.value) {\r\n      case 'number': {\r\n        segment.type = 'number';\r\n        break;\r\n      }\r\n      case 'boolean': {\r\n        segment.type = 'boolean';\r\n        break;\r\n      }\r\n      case 'function': {\r\n        segment.type = 'function';\r\n        break;\r\n      }\r\n      case 'string': {\r\n        segment.type = 'string';\r\n        segment.description = '\"' + segment.value + '\"';\r\n        break;\r\n      }\r\n      case 'undefined': {\r\n        segment.type = 'undefined';\r\n        segment.description = 'undefined';\r\n        break;\r\n      }\r\n      case 'object': {\r\n        // yea, null is object\r\n        if (segment.value === null) {\r\n          segment.type = 'null';\r\n          segment.description = 'null';\r\n        } else if (Array.isArray(segment.value)) {\r\n          segment.type = 'array';\r\n          segment.description =\r\n            'Array[' + segment.value.length + '] ' + JSON.stringify(segment.value);\r\n        } else if (segment.value instanceof Date) {\r\n          segment.type = 'date';\r\n        } else {\r\n          segment.type = 'object';\r\n          segment.description = 'Object ' + JSON.stringify(segment.value);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    return segment;\r\n  }\r\n\r\n  private isExpanded(): boolean {\r\n    return this.expanded && !(this.depth > -1 && this._currentDepth >= this.depth);\r\n  }\r\n\r\n  // https://github.com/douglascrockford/JSON-js/blob/master/cycle.js\r\n  private decycle(object: any): any {\r\n    const objects = new WeakMap();\r\n    return (function derez(value: any, path: any): any {\r\n      let oldPath;\r\n      let nu: any;\r\n\r\n      if (\r\n        typeof value === 'object' &&\r\n        value !== null &&\r\n        !(value instanceof Boolean) &&\r\n        !(value instanceof Date) &&\r\n        !(value instanceof Number) &&\r\n        !(value instanceof RegExp) &&\r\n        !(value instanceof String)\r\n      ) {\r\n        oldPath = objects.get(value);\r\n        if (oldPath !== undefined) {\r\n          return {$ref: oldPath};\r\n        }\r\n        objects.set(value, path);\r\n\r\n        if (Array.isArray(value)) {\r\n          nu = [];\r\n          value.forEach((element, i) => {\r\n            nu[i] = derez(element, path + '[' + i + ']');\r\n          });\r\n        } else {\r\n          nu = {};\r\n          Object.keys(value).forEach(name => {\r\n            nu[name] = derez(value[name], path + '[' + JSON.stringify(name) + ']');\r\n          });\r\n        }\r\n        return nu;\r\n      }\r\n      return value;\r\n    })(object, '$');\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { NgxJsonViewerComponent } from './ngx-json-viewer/ngx-json-viewer.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    NgxJsonViewerComponent\r\n  ],\r\n  exports: [\r\n    NgxJsonViewerComponent\r\n  ]\r\n})\r\nexport class NgxJsonViewerModule { }\r\n"]}